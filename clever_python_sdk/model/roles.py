# coding: utf-8

"""
    Data API

    Serves the Clever Data API

    The version of the OpenAPI document: 3.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clever_python_sdk import schemas  # noqa: F401


class Roles(
    schemas.AnyTypeSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def contact() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def district_admin() -> typing.Type['DistrictAdmin']:
                return DistrictAdmin
        
            @staticmethod
            def staff() -> typing.Type['Staff']:
                return Staff
        
            @staticmethod
            def student() -> typing.Type['Student']:
                return Student
        
            @staticmethod
            def teacher() -> typing.Type['Teacher']:
                return Teacher
            __annotations__ = {
                "contact": contact,
                "district_admin": district_admin,
                "staff": staff,
                "student": student,
                "teacher": teacher,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["district_admin"]) -> 'DistrictAdmin': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staff"]) -> 'Staff': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["student"]) -> 'Student': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teacher"]) -> 'Teacher': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contact", "district_admin", "staff", "student", "teacher", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["district_admin"]) -> typing.Union['DistrictAdmin', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staff"]) -> typing.Union['Staff', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["student"]) -> typing.Union['Student', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teacher"]) -> typing.Union['Teacher', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contact", "district_admin", "staff", "student", "teacher", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        contact: typing.Union['Contact', schemas.Unset] = schemas.unset,
        district_admin: typing.Union['DistrictAdmin', schemas.Unset] = schemas.unset,
        staff: typing.Union['Staff', schemas.Unset] = schemas.unset,
        student: typing.Union['Student', schemas.Unset] = schemas.unset,
        teacher: typing.Union['Teacher', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Roles':
        return super().__new__(
            cls,
            *args,
            contact=contact,
            district_admin=district_admin,
            staff=staff,
            student=student,
            teacher=teacher,
            _configuration=_configuration,
            **kwargs,
        )

from clever_python_sdk.model.contact import Contact
from clever_python_sdk.model.district_admin import DistrictAdmin
from clever_python_sdk.model.staff import Staff
from clever_python_sdk.model.student import Student
from clever_python_sdk.model.teacher import Teacher
