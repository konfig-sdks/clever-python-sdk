# coding: utf-8

"""
    Data API

    Serves the Clever Data API

    The version of the OpenAPI document: 3.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clever_python_sdk import schemas  # noqa: F401


class Contact(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            legacy_id = schemas.StrSchema
            
            
            class phone(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'phone':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class phone_type(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Cell": "CELL",
                        "Home": "HOME",
                        "Work": "WORK",
                        "Other": "OTHER",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def CELL(cls):
                    return cls("Cell")
                
                @schemas.classproperty
                def HOME(cls):
                    return cls("Home")
                
                @schemas.classproperty
                def WORK(cls):
                    return cls("Work")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'phone_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sis_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sis_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class student_relationships(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StudentRelationship']:
                        return StudentRelationship
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StudentRelationship'], typing.List['StudentRelationship']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'student_relationships':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StudentRelationship':
                    return super().__getitem__(i)
            __annotations__ = {
                "legacy_id": legacy_id,
                "phone": phone,
                "phone_type": phone_type,
                "sis_id": sis_id,
                "student_relationships": student_relationships,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legacy_id"]) -> MetaOapg.properties.legacy_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_type"]) -> MetaOapg.properties.phone_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sis_id"]) -> MetaOapg.properties.sis_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["student_relationships"]) -> MetaOapg.properties.student_relationships: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["legacy_id", "phone", "phone_type", "sis_id", "student_relationships", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legacy_id"]) -> typing.Union[MetaOapg.properties.legacy_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_type"]) -> typing.Union[MetaOapg.properties.phone_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sis_id"]) -> typing.Union[MetaOapg.properties.sis_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["student_relationships"]) -> typing.Union[MetaOapg.properties.student_relationships, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["legacy_id", "phone", "phone_type", "sis_id", "student_relationships", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        legacy_id: typing.Union[MetaOapg.properties.legacy_id, str, schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, None, str, schemas.Unset] = schemas.unset,
        phone_type: typing.Union[MetaOapg.properties.phone_type, None, str, schemas.Unset] = schemas.unset,
        sis_id: typing.Union[MetaOapg.properties.sis_id, None, str, schemas.Unset] = schemas.unset,
        student_relationships: typing.Union[MetaOapg.properties.student_relationships, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Contact':
        return super().__new__(
            cls,
            *args,
            legacy_id=legacy_id,
            phone=phone,
            phone_type=phone_type,
            sis_id=sis_id,
            student_relationships=student_relationships,
            _configuration=_configuration,
            **kwargs,
        )

from clever_python_sdk.model.student_relationship import StudentRelationship
