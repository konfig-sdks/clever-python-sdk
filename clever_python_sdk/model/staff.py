# coding: utf-8

"""
    Data API

    Serves the Clever Data API

    The version of the OpenAPI document: 3.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clever_python_sdk import schemas  # noqa: F401


class Staff(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'title':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def credentials() -> typing.Type['Credentials']:
                return Credentials
            
            
            class department(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'department':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            ext = schemas.DictSchema
            legacy_id = schemas.StrSchema
        
            @staticmethod
            def roles() -> typing.Type['StaffRoles']:
                return StaffRoles
        
            @staticmethod
            def schools() -> typing.Type['StaffSchools']:
                return StaffSchools
            staff_id = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "credentials": credentials,
                "department": department,
                "ext": ext,
                "legacy_id": legacy_id,
                "roles": roles,
                "schools": schools,
                "staff_id": staff_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentials"]) -> 'Credentials': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> MetaOapg.properties.department: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ext"]) -> MetaOapg.properties.ext: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legacy_id"]) -> MetaOapg.properties.legacy_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roles"]) -> 'StaffRoles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schools"]) -> 'StaffSchools': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staff_id"]) -> MetaOapg.properties.staff_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "credentials", "department", "ext", "legacy_id", "roles", "schools", "staff_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentials"]) -> typing.Union['Credentials', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union[MetaOapg.properties.department, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ext"]) -> typing.Union[MetaOapg.properties.ext, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legacy_id"]) -> typing.Union[MetaOapg.properties.legacy_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roles"]) -> typing.Union['StaffRoles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schools"]) -> typing.Union['StaffSchools', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staff_id"]) -> typing.Union[MetaOapg.properties.staff_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "credentials", "department", "ext", "legacy_id", "roles", "schools", "staff_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, None, str, schemas.Unset] = schemas.unset,
        credentials: typing.Union['Credentials', schemas.Unset] = schemas.unset,
        department: typing.Union[MetaOapg.properties.department, None, str, schemas.Unset] = schemas.unset,
        ext: typing.Union[MetaOapg.properties.ext, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        legacy_id: typing.Union[MetaOapg.properties.legacy_id, str, schemas.Unset] = schemas.unset,
        roles: typing.Union['StaffRoles', schemas.Unset] = schemas.unset,
        schools: typing.Union['StaffSchools', schemas.Unset] = schemas.unset,
        staff_id: typing.Union[MetaOapg.properties.staff_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Staff':
        return super().__new__(
            cls,
            *args,
            title=title,
            credentials=credentials,
            department=department,
            ext=ext,
            legacy_id=legacy_id,
            roles=roles,
            schools=schools,
            staff_id=staff_id,
            _configuration=_configuration,
            **kwargs,
        )

from clever_python_sdk.model.credentials import Credentials
from clever_python_sdk.model.staff_roles import StaffRoles
from clever_python_sdk.model.staff_schools import StaffSchools
