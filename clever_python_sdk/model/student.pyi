# coding: utf-8

"""
    Data API

    Serves the Clever Data API

    The version of the OpenAPI document: 3.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clever_python_sdk import schemas  # noqa: F401


class Student(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            created = schemas.StrSchema
        
            @staticmethod
            def credentials() -> typing.Type['Credentials']:
                return Credentials
        
            @staticmethod
            def disability() -> typing.Type['Disability']:
                return Disability
            
            
            class dob(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dob':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class ell_status(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Y": "Y",
                        "N": "N",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def Y(cls):
                    return cls("Y")
                
                @schemas.classproperty
                def N(cls):
                    return cls("N")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ell_status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class enrollments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SchoolEnrollment']:
                        return SchoolEnrollment
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SchoolEnrollment'], typing.List['SchoolEnrollment']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'enrollments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SchoolEnrollment':
                    return super().__getitem__(i)
            ext = schemas.DictSchema
            
            
            class frl_status(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Free": "FREE",
                        "Reduced": "REDUCED",
                        "Paid": "PAID",
                        "Other": "OTHER",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def FREE(cls):
                    return cls("Free")
                
                @schemas.classproperty
                def REDUCED(cls):
                    return cls("Reduced")
                
                @schemas.classproperty
                def PAID(cls):
                    return cls("Paid")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'frl_status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gender(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "M": "M",
                        "F": "F",
                        "X": "X",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def M(cls):
                    return cls("M")
                
                @schemas.classproperty
                def F(cls):
                    return cls("F")
                
                @schemas.classproperty
                def X(cls):
                    return cls("X")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gender':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gifted_status(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Y": "Y",
                        "N": "N",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def Y(cls):
                    return cls("Y")
                
                @schemas.classproperty
                def N(cls):
                    return cls("N")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gifted_status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class grade(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "InfantToddler": "INFANT_TODDLER",
                        "Preschool": "PRESCHOOL",
                        "PreKindergarten": "PRE_KINDERGARTEN",
                        "TransitionalKindergarten": "TRANSITIONAL_KINDERGARTEN",
                        "Kindergarten": "KINDERGARTEN",
                        "1": "POSITIVE_1",
                        "2": "POSITIVE_2",
                        "3": "POSITIVE_3",
                        "4": "POSITIVE_4",
                        "5": "POSITIVE_5",
                        "6": "POSITIVE_6",
                        "7": "POSITIVE_7",
                        "8": "POSITIVE_8",
                        "9": "POSITIVE_9",
                        "10": "POSITIVE_10",
                        "11": "POSITIVE_11",
                        "12": "POSITIVE_12",
                        "13": "POSITIVE_13",
                        "PostGraduate": "POST_GRADUATE",
                        "Ungraded": "UNGRADED",
                        "Other": "OTHER",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def INFANT_TODDLER(cls):
                    return cls("InfantToddler")
                
                @schemas.classproperty
                def PRESCHOOL(cls):
                    return cls("Preschool")
                
                @schemas.classproperty
                def PRE_KINDERGARTEN(cls):
                    return cls("PreKindergarten")
                
                @schemas.classproperty
                def TRANSITIONAL_KINDERGARTEN(cls):
                    return cls("TransitionalKindergarten")
                
                @schemas.classproperty
                def KINDERGARTEN(cls):
                    return cls("Kindergarten")
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls("1")
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls("2")
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls("3")
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls("4")
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls("5")
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls("6")
                
                @schemas.classproperty
                def POSITIVE_7(cls):
                    return cls("7")
                
                @schemas.classproperty
                def POSITIVE_8(cls):
                    return cls("8")
                
                @schemas.classproperty
                def POSITIVE_9(cls):
                    return cls("9")
                
                @schemas.classproperty
                def POSITIVE_10(cls):
                    return cls("10")
                
                @schemas.classproperty
                def POSITIVE_11(cls):
                    return cls("11")
                
                @schemas.classproperty
                def POSITIVE_12(cls):
                    return cls("12")
                
                @schemas.classproperty
                def POSITIVE_13(cls):
                    return cls("13")
                
                @schemas.classproperty
                def POST_GRADUATE(cls):
                    return cls("PostGraduate")
                
                @schemas.classproperty
                def UNGRADED(cls):
                    return cls("Ungraded")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'grade':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class graduation_year(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'graduation_year':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class hispanic_ethnicity(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Y": "Y",
                        "N": "N",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def Y(cls):
                    return cls("Y")
                
                @schemas.classproperty
                def N(cls):
                    return cls("N")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hispanic_ethnicity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class home_language(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Basque": "BASQUE",
                        "Portuguese": "PORTUGUESE",
                        "Hungarian": "HUNGARIAN",
                        "Hmong": "HMONG",
                        "Urdu": "URDU",
                        "Latvian": "LATVIAN",
                        "Hausa": "HAUSA",
                        "Slovenian": "SLOVENIAN",
                        "Chinese (Mandarin)": "CHINESE_MANDARIN",
                        "Russian": "RUSSIAN",
                        "Arabic": "ARABIC",
                        "Telugu": "TELUGU",
                        "Afrikaans": "AFRIKAANS",
                        "Tamil": "TAMIL",
                        "Irish": "IRISH",
                        "Uzbek": "UZBEK",
                        "Norwegian": "NORWEGIAN",
                        "Serbian": "SERBIAN",
                        "Khmer": "KHMER",
                        "Farsi": "FARSI",
                        "Lao": "LAO",
                        "Gujarati": "GUJARATI",
                        "Yiddish": "YIDDISH",
                        "Lithuanian": "LITHUANIAN",
                        "Mongolian": "MONGOLIAN",
                        "Samoan": "SAMOAN",
                        "Bengali": "BENGALI",
                        "Corsican": "CORSICAN",
                        "Romanian": "ROMANIAN",
                        "Javanese": "JAVANESE",
                        "Danish": "DANISH",
                        "Scots Gaelic": "SCOTS_GAELIC",
                        "Burmese": "BURMESE",
                        "Kinyarwanda": "KINYARWANDA",
                        "Swahili": "SWAHILI",
                        "Yoruba": "YORUBA",
                        "Uyghur": "UYGHUR",
                        "Hindi": "HINDI",
                        "Azerbaijani": "AZERBAIJANI",
                        "Cabo Verdean": "CABO_VERDEAN",
                        "Haitian Creole": "HAITIAN_CREOLE",
                        "Amharic": "AMHARIC",
                        "Maori": "MAORI",
                        "Somali": "SOMALI",
                        "English": "ENGLISH",
                        "Hawaiian": "HAWAIIAN",
                        "Maltese": "MALTESE",
                        "Thai": "THAI",
                        "Slovak": "SLOVAK",
                        "Nepali": "NEPALI",
                        "Bosnian": "BOSNIAN",
                        "Marathi": "MARATHI",
                        "Frisian": "FRISIAN",
                        "Swedish": "SWEDISH",
                        "Kazakh": "KAZAKH",
                        "German": "GERMAN",
                        "Turkish": "TURKISH",
                        "Chinese": "CHINESE",
                        "Luxembourgish": "LUXEMBOURGISH",
                        "Armenian": "ARMENIAN",
                        "Dari": "DARI",
                        "Macedonian": "MACEDONIAN",
                        "Karen": "KAREN",
                        "Iloko": "ILOKO",
                        "Igbo": "IGBO",
                        "Kannada": "KANNADA",
                        "Galician": "GALICIAN",
                        "Cebuano": "CEBUANO",
                        "Punjabi": "PUNJABI",
                        "Indonesian": "INDONESIAN",
                        "Estonian": "ESTONIAN",
                        "Odia": "ODIA",
                        "Spanish": "SPANISH",
                        "Filipino": "FILIPINO",
                        "Albanian": "ALBANIAN",
                        "Korean": "KOREAN",
                        "Croatian": "CROATIAN",
                        "Japanese": "JAPANESE",
                        "Bulgarian": "BULGARIAN",
                        "Catalan": "CATALAN",
                        "Polish": "POLISH",
                        "Sinhala": "SINHALA",
                        "Other": "OTHER",
                        "Icelandic": "ICELANDIC",
                        "Tatar": "TATAR",
                        "Ukrainian": "UKRAINIAN",
                        "Tajik": "TAJIK",
                        "Italian": "ITALIAN",
                        "French": "FRENCH",
                        "Malayalam": "MALAYALAM",
                        "Chichewa": "CHICHEWA",
                        "Kurdish (Kurmanji)": "KURDISH_KURMANJI",
                        "Czech": "CZECH",
                        "Xhosa": "XHOSA",
                        "Hebrew": "HEBREW",
                        "Georgian": "GEORGIAN",
                        "Oromo": "OROMO",
                        "Shona": "SHONA",
                        "Sindhi": "SINDHI",
                        "Sesotho": "SESOTHO",
                        "Tagalog": "TAGALOG",
                        "Malagasy": "MALAGASY",
                        "Tigrinya": "TIGRINYA",
                        "Welsh": "WELSH",
                        "Turkmen": "TURKMEN",
                        "Malay": "MALAY",
                        "Marshallese": "MARSHALLESE",
                        "Belarusian": "BELARUSIAN",
                        "Dutch": "DUTCH",
                        "Finnish": "FINNISH",
                        "Greek": "GREEK",
                        "Kyrgyz": "KYRGYZ",
                        "Zulu": "ZULU",
                        "Sundanese": "SUNDANESE",
                        "Vietnamese": "VIETNAMESE",
                        "Pashto": "PASHTO",
                    }
                
                @schemas.classproperty
                def BASQUE(cls):
                    return cls("Basque")
                
                @schemas.classproperty
                def PORTUGUESE(cls):
                    return cls("Portuguese")
                
                @schemas.classproperty
                def HUNGARIAN(cls):
                    return cls("Hungarian")
                
                @schemas.classproperty
                def HMONG(cls):
                    return cls("Hmong")
                
                @schemas.classproperty
                def URDU(cls):
                    return cls("Urdu")
                
                @schemas.classproperty
                def LATVIAN(cls):
                    return cls("Latvian")
                
                @schemas.classproperty
                def HAUSA(cls):
                    return cls("Hausa")
                
                @schemas.classproperty
                def SLOVENIAN(cls):
                    return cls("Slovenian")
                
                @schemas.classproperty
                def CHINESE_MANDARIN(cls):
                    return cls("Chinese (Mandarin)")
                
                @schemas.classproperty
                def RUSSIAN(cls):
                    return cls("Russian")
                
                @schemas.classproperty
                def ARABIC(cls):
                    return cls("Arabic")
                
                @schemas.classproperty
                def TELUGU(cls):
                    return cls("Telugu")
                
                @schemas.classproperty
                def AFRIKAANS(cls):
                    return cls("Afrikaans")
                
                @schemas.classproperty
                def TAMIL(cls):
                    return cls("Tamil")
                
                @schemas.classproperty
                def IRISH(cls):
                    return cls("Irish")
                
                @schemas.classproperty
                def UZBEK(cls):
                    return cls("Uzbek")
                
                @schemas.classproperty
                def NORWEGIAN(cls):
                    return cls("Norwegian")
                
                @schemas.classproperty
                def SERBIAN(cls):
                    return cls("Serbian")
                
                @schemas.classproperty
                def KHMER(cls):
                    return cls("Khmer")
                
                @schemas.classproperty
                def FARSI(cls):
                    return cls("Farsi")
                
                @schemas.classproperty
                def LAO(cls):
                    return cls("Lao")
                
                @schemas.classproperty
                def GUJARATI(cls):
                    return cls("Gujarati")
                
                @schemas.classproperty
                def YIDDISH(cls):
                    return cls("Yiddish")
                
                @schemas.classproperty
                def LITHUANIAN(cls):
                    return cls("Lithuanian")
                
                @schemas.classproperty
                def MONGOLIAN(cls):
                    return cls("Mongolian")
                
                @schemas.classproperty
                def SAMOAN(cls):
                    return cls("Samoan")
                
                @schemas.classproperty
                def BENGALI(cls):
                    return cls("Bengali")
                
                @schemas.classproperty
                def CORSICAN(cls):
                    return cls("Corsican")
                
                @schemas.classproperty
                def ROMANIAN(cls):
                    return cls("Romanian")
                
                @schemas.classproperty
                def JAVANESE(cls):
                    return cls("Javanese")
                
                @schemas.classproperty
                def DANISH(cls):
                    return cls("Danish")
                
                @schemas.classproperty
                def SCOTS_GAELIC(cls):
                    return cls("Scots Gaelic")
                
                @schemas.classproperty
                def BURMESE(cls):
                    return cls("Burmese")
                
                @schemas.classproperty
                def KINYARWANDA(cls):
                    return cls("Kinyarwanda")
                
                @schemas.classproperty
                def SWAHILI(cls):
                    return cls("Swahili")
                
                @schemas.classproperty
                def YORUBA(cls):
                    return cls("Yoruba")
                
                @schemas.classproperty
                def UYGHUR(cls):
                    return cls("Uyghur")
                
                @schemas.classproperty
                def HINDI(cls):
                    return cls("Hindi")
                
                @schemas.classproperty
                def AZERBAIJANI(cls):
                    return cls("Azerbaijani")
                
                @schemas.classproperty
                def CABO_VERDEAN(cls):
                    return cls("Cabo Verdean")
                
                @schemas.classproperty
                def HAITIAN_CREOLE(cls):
                    return cls("Haitian Creole")
                
                @schemas.classproperty
                def AMHARIC(cls):
                    return cls("Amharic")
                
                @schemas.classproperty
                def MAORI(cls):
                    return cls("Maori")
                
                @schemas.classproperty
                def SOMALI(cls):
                    return cls("Somali")
                
                @schemas.classproperty
                def ENGLISH(cls):
                    return cls("English")
                
                @schemas.classproperty
                def HAWAIIAN(cls):
                    return cls("Hawaiian")
                
                @schemas.classproperty
                def MALTESE(cls):
                    return cls("Maltese")
                
                @schemas.classproperty
                def THAI(cls):
                    return cls("Thai")
                
                @schemas.classproperty
                def SLOVAK(cls):
                    return cls("Slovak")
                
                @schemas.classproperty
                def NEPALI(cls):
                    return cls("Nepali")
                
                @schemas.classproperty
                def BOSNIAN(cls):
                    return cls("Bosnian")
                
                @schemas.classproperty
                def MARATHI(cls):
                    return cls("Marathi")
                
                @schemas.classproperty
                def FRISIAN(cls):
                    return cls("Frisian")
                
                @schemas.classproperty
                def SWEDISH(cls):
                    return cls("Swedish")
                
                @schemas.classproperty
                def KAZAKH(cls):
                    return cls("Kazakh")
                
                @schemas.classproperty
                def GERMAN(cls):
                    return cls("German")
                
                @schemas.classproperty
                def TURKISH(cls):
                    return cls("Turkish")
                
                @schemas.classproperty
                def CHINESE(cls):
                    return cls("Chinese")
                
                @schemas.classproperty
                def LUXEMBOURGISH(cls):
                    return cls("Luxembourgish")
                
                @schemas.classproperty
                def ARMENIAN(cls):
                    return cls("Armenian")
                
                @schemas.classproperty
                def DARI(cls):
                    return cls("Dari")
                
                @schemas.classproperty
                def MACEDONIAN(cls):
                    return cls("Macedonian")
                
                @schemas.classproperty
                def KAREN(cls):
                    return cls("Karen")
                
                @schemas.classproperty
                def ILOKO(cls):
                    return cls("Iloko")
                
                @schemas.classproperty
                def IGBO(cls):
                    return cls("Igbo")
                
                @schemas.classproperty
                def KANNADA(cls):
                    return cls("Kannada")
                
                @schemas.classproperty
                def GALICIAN(cls):
                    return cls("Galician")
                
                @schemas.classproperty
                def CEBUANO(cls):
                    return cls("Cebuano")
                
                @schemas.classproperty
                def PUNJABI(cls):
                    return cls("Punjabi")
                
                @schemas.classproperty
                def INDONESIAN(cls):
                    return cls("Indonesian")
                
                @schemas.classproperty
                def ESTONIAN(cls):
                    return cls("Estonian")
                
                @schemas.classproperty
                def ODIA(cls):
                    return cls("Odia")
                
                @schemas.classproperty
                def SPANISH(cls):
                    return cls("Spanish")
                
                @schemas.classproperty
                def FILIPINO(cls):
                    return cls("Filipino")
                
                @schemas.classproperty
                def ALBANIAN(cls):
                    return cls("Albanian")
                
                @schemas.classproperty
                def KOREAN(cls):
                    return cls("Korean")
                
                @schemas.classproperty
                def CROATIAN(cls):
                    return cls("Croatian")
                
                @schemas.classproperty
                def JAPANESE(cls):
                    return cls("Japanese")
                
                @schemas.classproperty
                def BULGARIAN(cls):
                    return cls("Bulgarian")
                
                @schemas.classproperty
                def CATALAN(cls):
                    return cls("Catalan")
                
                @schemas.classproperty
                def POLISH(cls):
                    return cls("Polish")
                
                @schemas.classproperty
                def SINHALA(cls):
                    return cls("Sinhala")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def ICELANDIC(cls):
                    return cls("Icelandic")
                
                @schemas.classproperty
                def TATAR(cls):
                    return cls("Tatar")
                
                @schemas.classproperty
                def UKRAINIAN(cls):
                    return cls("Ukrainian")
                
                @schemas.classproperty
                def TAJIK(cls):
                    return cls("Tajik")
                
                @schemas.classproperty
                def ITALIAN(cls):
                    return cls("Italian")
                
                @schemas.classproperty
                def FRENCH(cls):
                    return cls("French")
                
                @schemas.classproperty
                def MALAYALAM(cls):
                    return cls("Malayalam")
                
                @schemas.classproperty
                def CHICHEWA(cls):
                    return cls("Chichewa")
                
                @schemas.classproperty
                def KURDISH_KURMANJI(cls):
                    return cls("Kurdish (Kurmanji)")
                
                @schemas.classproperty
                def CZECH(cls):
                    return cls("Czech")
                
                @schemas.classproperty
                def XHOSA(cls):
                    return cls("Xhosa")
                
                @schemas.classproperty
                def HEBREW(cls):
                    return cls("Hebrew")
                
                @schemas.classproperty
                def GEORGIAN(cls):
                    return cls("Georgian")
                
                @schemas.classproperty
                def OROMO(cls):
                    return cls("Oromo")
                
                @schemas.classproperty
                def SHONA(cls):
                    return cls("Shona")
                
                @schemas.classproperty
                def SINDHI(cls):
                    return cls("Sindhi")
                
                @schemas.classproperty
                def SESOTHO(cls):
                    return cls("Sesotho")
                
                @schemas.classproperty
                def TAGALOG(cls):
                    return cls("Tagalog")
                
                @schemas.classproperty
                def MALAGASY(cls):
                    return cls("Malagasy")
                
                @schemas.classproperty
                def TIGRINYA(cls):
                    return cls("Tigrinya")
                
                @schemas.classproperty
                def WELSH(cls):
                    return cls("Welsh")
                
                @schemas.classproperty
                def TURKMEN(cls):
                    return cls("Turkmen")
                
                @schemas.classproperty
                def MALAY(cls):
                    return cls("Malay")
                
                @schemas.classproperty
                def MARSHALLESE(cls):
                    return cls("Marshallese")
                
                @schemas.classproperty
                def BELARUSIAN(cls):
                    return cls("Belarusian")
                
                @schemas.classproperty
                def DUTCH(cls):
                    return cls("Dutch")
                
                @schemas.classproperty
                def FINNISH(cls):
                    return cls("Finnish")
                
                @schemas.classproperty
                def GREEK(cls):
                    return cls("Greek")
                
                @schemas.classproperty
                def KYRGYZ(cls):
                    return cls("Kyrgyz")
                
                @schemas.classproperty
                def ZULU(cls):
                    return cls("Zulu")
                
                @schemas.classproperty
                def SUNDANESE(cls):
                    return cls("Sundanese")
                
                @schemas.classproperty
                def VIETNAMESE(cls):
                    return cls("Vietnamese")
                
                @schemas.classproperty
                def PASHTO(cls):
                    return cls("Pashto")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'home_language':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class home_language_code(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "hau": "HAU",
                        "ilo": "ILO",
                        "dan": "DAN",
                        "som": "SOM",
                        "xho": "XHO",
                        "slv": "SLV",
                        "bos": "BOS",
                        "cos": "COS",
                        "ces": "CES",
                        "mlg": "MLG",
                        "vie": "VIE",
                        "bel": "BEL",
                        "hin": "HIN",
                        "hun": "HUN",
                        "mon": "MON",
                        "pan": "PAN",
                        "tgk": "TGK",
                        "heb": "HEB",
                        "prs": "PRS",
                        "mlt": "MLT",
                        "pus": "PUS",
                        "tir": "TIR",
                        "eng": "ENG",
                        "mar": "MAR",
                        "nld": "NLD",
                        "est": "EST",
                        "zho": "ZHO",
                        "fas": "FAS",
                        "fry": "FRY",
                        "jpn": "JPN",
                        "aze": "AZE",
                        "rus": "RUS",
                        "gla": "GLA",
                        "yor": "YOR",
                        "cmn": "CMN",
                        "bul": "BUL",
                        "fin": "FIN",
                        "hmn": "HMN",
                        "ita": "ITA",
                        "pol": "POL",
                        "ara": "ARA",
                        "ell": "ELL",
                        "khm": "KHM",
                        "mkd": "MKD",
                        "cpp": "CPP",
                        "ibo": "IBO",
                        "urd": "URD",
                        "cym": "CYM",
                        "hat": "HAT",
                        "lao": "LAO",
                        "ltz": "LTZ",
                        "snd": "SND",
                        "swa": "SWA",
                        "mya": "MYA",
                        "ori": "ORI",
                        "kat": "KAT",
                        "smo": "SMO",
                        "spa": "SPA",
                        "kor": "KOR",
                        "nob": "NOB",
                        "ron": "RON",
                        "tha": "THA",
                        "ind": "IND",
                        "fra": "FRA",
                        "tel": "TEL",
                        "hye": "HYE",
                        "guj": "GUJ",
                        "isl": "ISL",
                        "msa": "MSA",
                        "slk": "SLK",
                        "swe": "SWE",
                        "tuk": "TUK",
                        "eus": "EUS",
                        "kaz": "KAZ",
                        "mal": "MAL",
                        "kan": "KAN",
                        "amh": "AMH",
                        "orm": "ORM",
                        "afr": "AFR",
                        "fil": "FIL",
                        "haw": "HAW",
                        "lav": "LAV",
                        "sin": "SIN",
                        "yid": "YID",
                        "ben": "BEN",
                        "kir": "KIR",
                        "mri": "MRI",
                        "tam": "TAM",
                        "glg": "GLG",
                        "ceb": "CEB",
                        "tat": "TAT",
                        "zul": "ZUL",
                        "lit": "LIT",
                        "nep": "NEP",
                        "por": "POR",
                        "sot": "SOT",
                        "other": "OTHER",
                        "nya": "NYA",
                        "sun": "SUN",
                        "cat": "CAT",
                        "tgl": "TGL",
                        "ukr": "UKR",
                        "uzb": "UZB",
                        "gle": "GLE",
                        "srp": "SRP",
                        "deu": "DEU",
                        "jav": "JAV",
                        "kur": "KUR",
                        "mah": "MAH",
                        "sna": "SNA",
                        "uig": "UIG",
                        "kin": "KIN",
                        "hrv": "HRV",
                        "kar": "KAR",
                        "tur": "TUR",
                        "sqi": "SQI",
                    }
                
                @schemas.classproperty
                def HAU(cls):
                    return cls("hau")
                
                @schemas.classproperty
                def ILO(cls):
                    return cls("ilo")
                
                @schemas.classproperty
                def DAN(cls):
                    return cls("dan")
                
                @schemas.classproperty
                def SOM(cls):
                    return cls("som")
                
                @schemas.classproperty
                def XHO(cls):
                    return cls("xho")
                
                @schemas.classproperty
                def SLV(cls):
                    return cls("slv")
                
                @schemas.classproperty
                def BOS(cls):
                    return cls("bos")
                
                @schemas.classproperty
                def COS(cls):
                    return cls("cos")
                
                @schemas.classproperty
                def CES(cls):
                    return cls("ces")
                
                @schemas.classproperty
                def MLG(cls):
                    return cls("mlg")
                
                @schemas.classproperty
                def VIE(cls):
                    return cls("vie")
                
                @schemas.classproperty
                def BEL(cls):
                    return cls("bel")
                
                @schemas.classproperty
                def HIN(cls):
                    return cls("hin")
                
                @schemas.classproperty
                def HUN(cls):
                    return cls("hun")
                
                @schemas.classproperty
                def MON(cls):
                    return cls("mon")
                
                @schemas.classproperty
                def PAN(cls):
                    return cls("pan")
                
                @schemas.classproperty
                def TGK(cls):
                    return cls("tgk")
                
                @schemas.classproperty
                def HEB(cls):
                    return cls("heb")
                
                @schemas.classproperty
                def PRS(cls):
                    return cls("prs")
                
                @schemas.classproperty
                def MLT(cls):
                    return cls("mlt")
                
                @schemas.classproperty
                def PUS(cls):
                    return cls("pus")
                
                @schemas.classproperty
                def TIR(cls):
                    return cls("tir")
                
                @schemas.classproperty
                def ENG(cls):
                    return cls("eng")
                
                @schemas.classproperty
                def MAR(cls):
                    return cls("mar")
                
                @schemas.classproperty
                def NLD(cls):
                    return cls("nld")
                
                @schemas.classproperty
                def EST(cls):
                    return cls("est")
                
                @schemas.classproperty
                def ZHO(cls):
                    return cls("zho")
                
                @schemas.classproperty
                def FAS(cls):
                    return cls("fas")
                
                @schemas.classproperty
                def FRY(cls):
                    return cls("fry")
                
                @schemas.classproperty
                def JPN(cls):
                    return cls("jpn")
                
                @schemas.classproperty
                def AZE(cls):
                    return cls("aze")
                
                @schemas.classproperty
                def RUS(cls):
                    return cls("rus")
                
                @schemas.classproperty
                def GLA(cls):
                    return cls("gla")
                
                @schemas.classproperty
                def YOR(cls):
                    return cls("yor")
                
                @schemas.classproperty
                def CMN(cls):
                    return cls("cmn")
                
                @schemas.classproperty
                def BUL(cls):
                    return cls("bul")
                
                @schemas.classproperty
                def FIN(cls):
                    return cls("fin")
                
                @schemas.classproperty
                def HMN(cls):
                    return cls("hmn")
                
                @schemas.classproperty
                def ITA(cls):
                    return cls("ita")
                
                @schemas.classproperty
                def POL(cls):
                    return cls("pol")
                
                @schemas.classproperty
                def ARA(cls):
                    return cls("ara")
                
                @schemas.classproperty
                def ELL(cls):
                    return cls("ell")
                
                @schemas.classproperty
                def KHM(cls):
                    return cls("khm")
                
                @schemas.classproperty
                def MKD(cls):
                    return cls("mkd")
                
                @schemas.classproperty
                def CPP(cls):
                    return cls("cpp")
                
                @schemas.classproperty
                def IBO(cls):
                    return cls("ibo")
                
                @schemas.classproperty
                def URD(cls):
                    return cls("urd")
                
                @schemas.classproperty
                def CYM(cls):
                    return cls("cym")
                
                @schemas.classproperty
                def HAT(cls):
                    return cls("hat")
                
                @schemas.classproperty
                def LAO(cls):
                    return cls("lao")
                
                @schemas.classproperty
                def LTZ(cls):
                    return cls("ltz")
                
                @schemas.classproperty
                def SND(cls):
                    return cls("snd")
                
                @schemas.classproperty
                def SWA(cls):
                    return cls("swa")
                
                @schemas.classproperty
                def MYA(cls):
                    return cls("mya")
                
                @schemas.classproperty
                def ORI(cls):
                    return cls("ori")
                
                @schemas.classproperty
                def KAT(cls):
                    return cls("kat")
                
                @schemas.classproperty
                def SMO(cls):
                    return cls("smo")
                
                @schemas.classproperty
                def SPA(cls):
                    return cls("spa")
                
                @schemas.classproperty
                def KOR(cls):
                    return cls("kor")
                
                @schemas.classproperty
                def NOB(cls):
                    return cls("nob")
                
                @schemas.classproperty
                def RON(cls):
                    return cls("ron")
                
                @schemas.classproperty
                def THA(cls):
                    return cls("tha")
                
                @schemas.classproperty
                def IND(cls):
                    return cls("ind")
                
                @schemas.classproperty
                def FRA(cls):
                    return cls("fra")
                
                @schemas.classproperty
                def TEL(cls):
                    return cls("tel")
                
                @schemas.classproperty
                def HYE(cls):
                    return cls("hye")
                
                @schemas.classproperty
                def GUJ(cls):
                    return cls("guj")
                
                @schemas.classproperty
                def ISL(cls):
                    return cls("isl")
                
                @schemas.classproperty
                def MSA(cls):
                    return cls("msa")
                
                @schemas.classproperty
                def SLK(cls):
                    return cls("slk")
                
                @schemas.classproperty
                def SWE(cls):
                    return cls("swe")
                
                @schemas.classproperty
                def TUK(cls):
                    return cls("tuk")
                
                @schemas.classproperty
                def EUS(cls):
                    return cls("eus")
                
                @schemas.classproperty
                def KAZ(cls):
                    return cls("kaz")
                
                @schemas.classproperty
                def MAL(cls):
                    return cls("mal")
                
                @schemas.classproperty
                def KAN(cls):
                    return cls("kan")
                
                @schemas.classproperty
                def AMH(cls):
                    return cls("amh")
                
                @schemas.classproperty
                def ORM(cls):
                    return cls("orm")
                
                @schemas.classproperty
                def AFR(cls):
                    return cls("afr")
                
                @schemas.classproperty
                def FIL(cls):
                    return cls("fil")
                
                @schemas.classproperty
                def HAW(cls):
                    return cls("haw")
                
                @schemas.classproperty
                def LAV(cls):
                    return cls("lav")
                
                @schemas.classproperty
                def SIN(cls):
                    return cls("sin")
                
                @schemas.classproperty
                def YID(cls):
                    return cls("yid")
                
                @schemas.classproperty
                def BEN(cls):
                    return cls("ben")
                
                @schemas.classproperty
                def KIR(cls):
                    return cls("kir")
                
                @schemas.classproperty
                def MRI(cls):
                    return cls("mri")
                
                @schemas.classproperty
                def TAM(cls):
                    return cls("tam")
                
                @schemas.classproperty
                def GLG(cls):
                    return cls("glg")
                
                @schemas.classproperty
                def CEB(cls):
                    return cls("ceb")
                
                @schemas.classproperty
                def TAT(cls):
                    return cls("tat")
                
                @schemas.classproperty
                def ZUL(cls):
                    return cls("zul")
                
                @schemas.classproperty
                def LIT(cls):
                    return cls("lit")
                
                @schemas.classproperty
                def NEP(cls):
                    return cls("nep")
                
                @schemas.classproperty
                def POR(cls):
                    return cls("por")
                
                @schemas.classproperty
                def SOT(cls):
                    return cls("sot")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
                
                @schemas.classproperty
                def NYA(cls):
                    return cls("nya")
                
                @schemas.classproperty
                def SUN(cls):
                    return cls("sun")
                
                @schemas.classproperty
                def CAT(cls):
                    return cls("cat")
                
                @schemas.classproperty
                def TGL(cls):
                    return cls("tgl")
                
                @schemas.classproperty
                def UKR(cls):
                    return cls("ukr")
                
                @schemas.classproperty
                def UZB(cls):
                    return cls("uzb")
                
                @schemas.classproperty
                def GLE(cls):
                    return cls("gle")
                
                @schemas.classproperty
                def SRP(cls):
                    return cls("srp")
                
                @schemas.classproperty
                def DEU(cls):
                    return cls("deu")
                
                @schemas.classproperty
                def JAV(cls):
                    return cls("jav")
                
                @schemas.classproperty
                def KUR(cls):
                    return cls("kur")
                
                @schemas.classproperty
                def MAH(cls):
                    return cls("mah")
                
                @schemas.classproperty
                def SNA(cls):
                    return cls("sna")
                
                @schemas.classproperty
                def UIG(cls):
                    return cls("uig")
                
                @schemas.classproperty
                def KIN(cls):
                    return cls("kin")
                
                @schemas.classproperty
                def HRV(cls):
                    return cls("hrv")
                
                @schemas.classproperty
                def KAR(cls):
                    return cls("kar")
                
                @schemas.classproperty
                def TUR(cls):
                    return cls("tur")
                
                @schemas.classproperty
                def SQI(cls):
                    return cls("sqi")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'home_language_code':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class iep_status(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'iep_status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            last_modified = schemas.StrSchema
            legacy_id = schemas.StrSchema
        
            @staticmethod
            def location() -> typing.Type['Location']:
                return Location
        
            @staticmethod
            def preferred_name() -> typing.Type['PreferredName']:
                return PreferredName
            
            
            class race(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Caucasian": "CAUCASIAN",
                        "Asian": "ASIAN",
                        "Black or African American": "BLACK_OR_AFRICAN_AMERICAN",
                        "American Indian": "AMERICAN_INDIAN",
                        "Hawaiian or Other Pacific Islander": "HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER",
                        "Two or More Races": "TWO_OR_MORE_RACES",
                        "Unknown": "UNKNOWN",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def CAUCASIAN(cls):
                    return cls("Caucasian")
                
                @schemas.classproperty
                def ASIAN(cls):
                    return cls("Asian")
                
                @schemas.classproperty
                def BLACK_OR_AFRICAN_AMERICAN(cls):
                    return cls("Black or African American")
                
                @schemas.classproperty
                def AMERICAN_INDIAN(cls):
                    return cls("American Indian")
                
                @schemas.classproperty
                def HAWAIIAN_OR_OTHER_PACIFIC_ISLANDER(cls):
                    return cls("Hawaiian or Other Pacific Islander")
                
                @schemas.classproperty
                def TWO_OR_MORE_RACES(cls):
                    return cls("Two or More Races")
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'race':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            school = schemas.StrSchema
        
            @staticmethod
            def schools() -> typing.Type['StudentSchools']:
                return StudentSchools
            
            
            class section_504_status(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Y": "Y",
                        "N": "N",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def Y(cls):
                    return cls("Y")
                
                @schemas.classproperty
                def N(cls):
                    return cls("N")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'section_504_status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            sis_id = schemas.StrSchema
            
            
            class state_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class student_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'student_number':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "created": created,
                "credentials": credentials,
                "disability": disability,
                "dob": dob,
                "ell_status": ell_status,
                "enrollments": enrollments,
                "ext": ext,
                "frl_status": frl_status,
                "gender": gender,
                "gifted_status": gifted_status,
                "grade": grade,
                "graduation_year": graduation_year,
                "hispanic_ethnicity": hispanic_ethnicity,
                "home_language": home_language,
                "home_language_code": home_language_code,
                "iep_status": iep_status,
                "last_modified": last_modified,
                "legacy_id": legacy_id,
                "location": location,
                "preferred_name": preferred_name,
                "race": race,
                "school": school,
                "schools": schools,
                "section_504_status": section_504_status,
                "sis_id": sis_id,
                "state_id": state_id,
                "student_number": student_number,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentials"]) -> 'Credentials': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disability"]) -> 'Disability': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dob"]) -> MetaOapg.properties.dob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ell_status"]) -> MetaOapg.properties.ell_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enrollments"]) -> MetaOapg.properties.enrollments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ext"]) -> MetaOapg.properties.ext: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frl_status"]) -> MetaOapg.properties.frl_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gifted_status"]) -> MetaOapg.properties.gifted_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grade"]) -> MetaOapg.properties.grade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["graduation_year"]) -> MetaOapg.properties.graduation_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hispanic_ethnicity"]) -> MetaOapg.properties.hispanic_ethnicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["home_language"]) -> MetaOapg.properties.home_language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["home_language_code"]) -> MetaOapg.properties.home_language_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iep_status"]) -> MetaOapg.properties.iep_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legacy_id"]) -> MetaOapg.properties.legacy_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'Location': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred_name"]) -> 'PreferredName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["race"]) -> MetaOapg.properties.race: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["school"]) -> MetaOapg.properties.school: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schools"]) -> 'StudentSchools': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section_504_status"]) -> MetaOapg.properties.section_504_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sis_id"]) -> MetaOapg.properties.sis_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_id"]) -> MetaOapg.properties.state_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["student_number"]) -> MetaOapg.properties.student_number: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created", "credentials", "disability", "dob", "ell_status", "enrollments", "ext", "frl_status", "gender", "gifted_status", "grade", "graduation_year", "hispanic_ethnicity", "home_language", "home_language_code", "iep_status", "last_modified", "legacy_id", "location", "preferred_name", "race", "school", "schools", "section_504_status", "sis_id", "state_id", "student_number", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentials"]) -> typing.Union['Credentials', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disability"]) -> typing.Union['Disability', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dob"]) -> typing.Union[MetaOapg.properties.dob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ell_status"]) -> typing.Union[MetaOapg.properties.ell_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enrollments"]) -> typing.Union[MetaOapg.properties.enrollments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ext"]) -> typing.Union[MetaOapg.properties.ext, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frl_status"]) -> typing.Union[MetaOapg.properties.frl_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gifted_status"]) -> typing.Union[MetaOapg.properties.gifted_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grade"]) -> typing.Union[MetaOapg.properties.grade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["graduation_year"]) -> typing.Union[MetaOapg.properties.graduation_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hispanic_ethnicity"]) -> typing.Union[MetaOapg.properties.hispanic_ethnicity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["home_language"]) -> typing.Union[MetaOapg.properties.home_language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["home_language_code"]) -> typing.Union[MetaOapg.properties.home_language_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iep_status"]) -> typing.Union[MetaOapg.properties.iep_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> typing.Union[MetaOapg.properties.last_modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legacy_id"]) -> typing.Union[MetaOapg.properties.legacy_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['Location', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred_name"]) -> typing.Union['PreferredName', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["race"]) -> typing.Union[MetaOapg.properties.race, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["school"]) -> typing.Union[MetaOapg.properties.school, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schools"]) -> typing.Union['StudentSchools', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section_504_status"]) -> typing.Union[MetaOapg.properties.section_504_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sis_id"]) -> typing.Union[MetaOapg.properties.sis_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_id"]) -> typing.Union[MetaOapg.properties.state_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["student_number"]) -> typing.Union[MetaOapg.properties.student_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created", "credentials", "disability", "dob", "ell_status", "enrollments", "ext", "frl_status", "gender", "gifted_status", "grade", "graduation_year", "hispanic_ethnicity", "home_language", "home_language_code", "iep_status", "last_modified", "legacy_id", "location", "preferred_name", "race", "school", "schools", "section_504_status", "sis_id", "state_id", "student_number", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created: typing.Union[MetaOapg.properties.created, str, schemas.Unset] = schemas.unset,
        credentials: typing.Union['Credentials', schemas.Unset] = schemas.unset,
        disability: typing.Union['Disability', schemas.Unset] = schemas.unset,
        dob: typing.Union[MetaOapg.properties.dob, None, str, schemas.Unset] = schemas.unset,
        ell_status: typing.Union[MetaOapg.properties.ell_status, None, str, schemas.Unset] = schemas.unset,
        enrollments: typing.Union[MetaOapg.properties.enrollments, list, tuple, schemas.Unset] = schemas.unset,
        ext: typing.Union[MetaOapg.properties.ext, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        frl_status: typing.Union[MetaOapg.properties.frl_status, None, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, None, str, schemas.Unset] = schemas.unset,
        gifted_status: typing.Union[MetaOapg.properties.gifted_status, None, str, schemas.Unset] = schemas.unset,
        grade: typing.Union[MetaOapg.properties.grade, None, str, schemas.Unset] = schemas.unset,
        graduation_year: typing.Union[MetaOapg.properties.graduation_year, None, str, schemas.Unset] = schemas.unset,
        hispanic_ethnicity: typing.Union[MetaOapg.properties.hispanic_ethnicity, None, str, schemas.Unset] = schemas.unset,
        home_language: typing.Union[MetaOapg.properties.home_language, None, str, schemas.Unset] = schemas.unset,
        home_language_code: typing.Union[MetaOapg.properties.home_language_code, None, str, schemas.Unset] = schemas.unset,
        iep_status: typing.Union[MetaOapg.properties.iep_status, None, str, schemas.Unset] = schemas.unset,
        last_modified: typing.Union[MetaOapg.properties.last_modified, str, schemas.Unset] = schemas.unset,
        legacy_id: typing.Union[MetaOapg.properties.legacy_id, str, schemas.Unset] = schemas.unset,
        location: typing.Union['Location', schemas.Unset] = schemas.unset,
        preferred_name: typing.Union['PreferredName', schemas.Unset] = schemas.unset,
        race: typing.Union[MetaOapg.properties.race, None, str, schemas.Unset] = schemas.unset,
        school: typing.Union[MetaOapg.properties.school, str, schemas.Unset] = schemas.unset,
        schools: typing.Union['StudentSchools', schemas.Unset] = schemas.unset,
        section_504_status: typing.Union[MetaOapg.properties.section_504_status, None, str, schemas.Unset] = schemas.unset,
        sis_id: typing.Union[MetaOapg.properties.sis_id, str, schemas.Unset] = schemas.unset,
        state_id: typing.Union[MetaOapg.properties.state_id, None, str, schemas.Unset] = schemas.unset,
        student_number: typing.Union[MetaOapg.properties.student_number, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Student':
        return super().__new__(
            cls,
            *args,
            created=created,
            credentials=credentials,
            disability=disability,
            dob=dob,
            ell_status=ell_status,
            enrollments=enrollments,
            ext=ext,
            frl_status=frl_status,
            gender=gender,
            gifted_status=gifted_status,
            grade=grade,
            graduation_year=graduation_year,
            hispanic_ethnicity=hispanic_ethnicity,
            home_language=home_language,
            home_language_code=home_language_code,
            iep_status=iep_status,
            last_modified=last_modified,
            legacy_id=legacy_id,
            location=location,
            preferred_name=preferred_name,
            race=race,
            school=school,
            schools=schools,
            section_504_status=section_504_status,
            sis_id=sis_id,
            state_id=state_id,
            student_number=student_number,
            _configuration=_configuration,
            **kwargs,
        )

from clever_python_sdk.model.credentials import Credentials
from clever_python_sdk.model.disability import Disability
from clever_python_sdk.model.location import Location
from clever_python_sdk.model.preferred_name import PreferredName
from clever_python_sdk.model.school_enrollment import SchoolEnrollment
from clever_python_sdk.model.student_schools import StudentSchools
