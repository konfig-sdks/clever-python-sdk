# coding: utf-8

"""
    Data API

    Serves the Clever Data API

    The version of the OpenAPI document: 3.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clever_python_sdk import schemas  # noqa: F401


class Section(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class course(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'course':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            created = schemas.StrSchema
            district = schemas.StrSchema
            ext = schemas.DictSchema
            
            
            class grade(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "InfantToddler": "INFANT_TODDLER",
                        "Preschool": "PRESCHOOL",
                        "PreKindergarten": "PRE_KINDERGARTEN",
                        "TransitionalKindergarten": "TRANSITIONAL_KINDERGARTEN",
                        "Kindergarten": "KINDERGARTEN",
                        "1": "POSITIVE_1",
                        "2": "POSITIVE_2",
                        "3": "POSITIVE_3",
                        "4": "POSITIVE_4",
                        "5": "POSITIVE_5",
                        "6": "POSITIVE_6",
                        "7": "POSITIVE_7",
                        "8": "POSITIVE_8",
                        "9": "POSITIVE_9",
                        "10": "POSITIVE_10",
                        "11": "POSITIVE_11",
                        "12": "POSITIVE_12",
                        "13": "POSITIVE_13",
                        "PostGraduate": "POST_GRADUATE",
                        "Ungraded": "UNGRADED",
                        "Other": "OTHER",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def INFANT_TODDLER(cls):
                    return cls("InfantToddler")
                
                @schemas.classproperty
                def PRESCHOOL(cls):
                    return cls("Preschool")
                
                @schemas.classproperty
                def PRE_KINDERGARTEN(cls):
                    return cls("PreKindergarten")
                
                @schemas.classproperty
                def TRANSITIONAL_KINDERGARTEN(cls):
                    return cls("TransitionalKindergarten")
                
                @schemas.classproperty
                def KINDERGARTEN(cls):
                    return cls("Kindergarten")
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls("1")
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls("2")
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls("3")
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls("4")
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls("5")
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls("6")
                
                @schemas.classproperty
                def POSITIVE_7(cls):
                    return cls("7")
                
                @schemas.classproperty
                def POSITIVE_8(cls):
                    return cls("8")
                
                @schemas.classproperty
                def POSITIVE_9(cls):
                    return cls("9")
                
                @schemas.classproperty
                def POSITIVE_10(cls):
                    return cls("10")
                
                @schemas.classproperty
                def POSITIVE_11(cls):
                    return cls("11")
                
                @schemas.classproperty
                def POSITIVE_12(cls):
                    return cls("12")
                
                @schemas.classproperty
                def POSITIVE_13(cls):
                    return cls("13")
                
                @schemas.classproperty
                def POST_GRADUATE(cls):
                    return cls("PostGraduate")
                
                @schemas.classproperty
                def UNGRADED(cls):
                    return cls("Ungraded")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'grade':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            id = schemas.StrSchema
            last_modified = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class period(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'period':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            school = schemas.StrSchema
            
            
            class section_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'section_number':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            sis_id = schemas.StrSchema
        
            @staticmethod
            def students() -> typing.Type['SectionStudents']:
                return SectionStudents
            
            
            class subject(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "english/language arts": "ENGLISH_LANGUAGE_ARTS",
                        "math": "MATH",
                        "science": "SCIENCE",
                        "social studies": "SOCIAL_STUDIES",
                        "language": "LANGUAGE",
                        "homeroom/advisory": "HOMEROOM_ADVISORY",
                        "interventions/online learning": "INTERVENTIONS_ONLINE_LEARNING",
                        "technology and engineering": "TECHNOLOGY_AND_ENGINEERING",
                        "PE and health": "PE_AND_HEALTH",
                        "arts and music": "ARTS_AND_MUSIC",
                        "other": "OTHER",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def ENGLISH_LANGUAGE_ARTS(cls):
                    return cls("english/language arts")
                
                @schemas.classproperty
                def MATH(cls):
                    return cls("math")
                
                @schemas.classproperty
                def SCIENCE(cls):
                    return cls("science")
                
                @schemas.classproperty
                def SOCIAL_STUDIES(cls):
                    return cls("social studies")
                
                @schemas.classproperty
                def LANGUAGE(cls):
                    return cls("language")
                
                @schemas.classproperty
                def HOMEROOM_ADVISORY(cls):
                    return cls("homeroom/advisory")
                
                @schemas.classproperty
                def INTERVENTIONS_ONLINE_LEARNING(cls):
                    return cls("interventions/online learning")
                
                @schemas.classproperty
                def TECHNOLOGY_AND_ENGINEERING(cls):
                    return cls("technology and engineering")
                
                @schemas.classproperty
                def PE_AND_HEALTH(cls):
                    return cls("PE and health")
                
                @schemas.classproperty
                def ARTS_AND_MUSIC(cls):
                    return cls("arts and music")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subject':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class teacher(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'teacher':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def teachers() -> typing.Type['SectionTeachers']:
                return SectionTeachers
            
            
            class term_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'term_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "course": course,
                "created": created,
                "district": district,
                "ext": ext,
                "grade": grade,
                "id": id,
                "last_modified": last_modified,
                "name": name,
                "period": period,
                "school": school,
                "section_number": section_number,
                "sis_id": sis_id,
                "students": students,
                "subject": subject,
                "teacher": teacher,
                "teachers": teachers,
                "term_id": term_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["course"]) -> MetaOapg.properties.course: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["district"]) -> MetaOapg.properties.district: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ext"]) -> MetaOapg.properties.ext: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grade"]) -> MetaOapg.properties.grade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["school"]) -> MetaOapg.properties.school: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section_number"]) -> MetaOapg.properties.section_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sis_id"]) -> MetaOapg.properties.sis_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["students"]) -> 'SectionStudents': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teacher"]) -> MetaOapg.properties.teacher: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teachers"]) -> 'SectionTeachers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["term_id"]) -> MetaOapg.properties.term_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["course", "created", "district", "ext", "grade", "id", "last_modified", "name", "period", "school", "section_number", "sis_id", "students", "subject", "teacher", "teachers", "term_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["course"]) -> typing.Union[MetaOapg.properties.course, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["district"]) -> typing.Union[MetaOapg.properties.district, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ext"]) -> typing.Union[MetaOapg.properties.ext, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grade"]) -> typing.Union[MetaOapg.properties.grade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> typing.Union[MetaOapg.properties.last_modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period"]) -> typing.Union[MetaOapg.properties.period, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["school"]) -> typing.Union[MetaOapg.properties.school, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section_number"]) -> typing.Union[MetaOapg.properties.section_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sis_id"]) -> typing.Union[MetaOapg.properties.sis_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["students"]) -> typing.Union['SectionStudents', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teacher"]) -> typing.Union[MetaOapg.properties.teacher, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teachers"]) -> typing.Union['SectionTeachers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["term_id"]) -> typing.Union[MetaOapg.properties.term_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["course", "created", "district", "ext", "grade", "id", "last_modified", "name", "period", "school", "section_number", "sis_id", "students", "subject", "teacher", "teachers", "term_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        course: typing.Union[MetaOapg.properties.course, None, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, schemas.Unset] = schemas.unset,
        district: typing.Union[MetaOapg.properties.district, str, schemas.Unset] = schemas.unset,
        ext: typing.Union[MetaOapg.properties.ext, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        grade: typing.Union[MetaOapg.properties.grade, None, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        last_modified: typing.Union[MetaOapg.properties.last_modified, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        period: typing.Union[MetaOapg.properties.period, None, str, schemas.Unset] = schemas.unset,
        school: typing.Union[MetaOapg.properties.school, str, schemas.Unset] = schemas.unset,
        section_number: typing.Union[MetaOapg.properties.section_number, None, str, schemas.Unset] = schemas.unset,
        sis_id: typing.Union[MetaOapg.properties.sis_id, str, schemas.Unset] = schemas.unset,
        students: typing.Union['SectionStudents', schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, None, str, schemas.Unset] = schemas.unset,
        teacher: typing.Union[MetaOapg.properties.teacher, None, str, schemas.Unset] = schemas.unset,
        teachers: typing.Union['SectionTeachers', schemas.Unset] = schemas.unset,
        term_id: typing.Union[MetaOapg.properties.term_id, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Section':
        return super().__new__(
            cls,
            *args,
            course=course,
            created=created,
            district=district,
            ext=ext,
            grade=grade,
            id=id,
            last_modified=last_modified,
            name=name,
            period=period,
            school=school,
            section_number=section_number,
            sis_id=sis_id,
            students=students,
            subject=subject,
            teacher=teacher,
            teachers=teachers,
            term_id=term_id,
            _configuration=_configuration,
            **kwargs,
        )

from clever_python_sdk.model.section_students import SectionStudents
from clever_python_sdk.model.section_teachers import SectionTeachers
