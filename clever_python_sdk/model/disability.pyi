# coding: utf-8

"""
    Data API

    Serves the Clever Data API

    The version of the OpenAPI document: 3.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clever_python_sdk import schemas  # noqa: F401


class Disability(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class disability_code(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "aut": "AUT",
                        "db": "DB",
                        "dd": "DD",
                        "emn": "EMN",
                        "hi": "HI",
                        "id": "ID",
                        "md": "MD",
                        "oi": "OI",
                        "other": "OTHER",
                        "ohi": "OHI",
                        "sld": "SLD",
                        "sli": "SLI",
                        "tbi": "TBI",
                        "vi": "VI",
                    }
                
                @schemas.classproperty
                def AUT(cls):
                    return cls("aut")
                
                @schemas.classproperty
                def DB(cls):
                    return cls("db")
                
                @schemas.classproperty
                def DD(cls):
                    return cls("dd")
                
                @schemas.classproperty
                def EMN(cls):
                    return cls("emn")
                
                @schemas.classproperty
                def HI(cls):
                    return cls("hi")
                
                @schemas.classproperty
                def ID(cls):
                    return cls("id")
                
                @schemas.classproperty
                def MD(cls):
                    return cls("md")
                
                @schemas.classproperty
                def OI(cls):
                    return cls("oi")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
                
                @schemas.classproperty
                def OHI(cls):
                    return cls("ohi")
                
                @schemas.classproperty
                def SLD(cls):
                    return cls("sld")
                
                @schemas.classproperty
                def SLI(cls):
                    return cls("sli")
                
                @schemas.classproperty
                def TBI(cls):
                    return cls("tbi")
                
                @schemas.classproperty
                def VI(cls):
                    return cls("vi")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'disability_code':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class disability_status(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Y": "Y",
                        "N": "N",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def Y(cls):
                    return cls("Y")
                
                @schemas.classproperty
                def N(cls):
                    return cls("N")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'disability_status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class disability_type(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Autism": "AUTISM",
                        "Deaf-blindness": "DEAFBLINDNESS",
                        "Developmental delay": "DEVELOPMENTAL_DELAY",
                        "Emotional disturbance": "EMOTIONAL_DISTURBANCE",
                        "Hearing impairment": "HEARING_IMPAIRMENT",
                        "Intellectual Disability": "INTELLECTUAL_DISABILITY",
                        "Multiple disabilities": "MULTIPLE_DISABILITIES",
                        "Orthopedic impairment": "ORTHOPEDIC_IMPAIRMENT",
                        "Other": "OTHER",
                        "Other health impairment": "OTHER_HEALTH_IMPAIRMENT",
                        "Specific learning disability": "SPECIFIC_LEARNING_DISABILITY",
                        "Speech or language impairment": "SPEECH_OR_LANGUAGE_IMPAIRMENT",
                        "Traumatic brain injury": "TRAUMATIC_BRAIN_INJURY",
                        "Visual impairment": "VISUAL_IMPAIRMENT",
                    }
                
                @schemas.classproperty
                def AUTISM(cls):
                    return cls("Autism")
                
                @schemas.classproperty
                def DEAFBLINDNESS(cls):
                    return cls("Deaf-blindness")
                
                @schemas.classproperty
                def DEVELOPMENTAL_DELAY(cls):
                    return cls("Developmental delay")
                
                @schemas.classproperty
                def EMOTIONAL_DISTURBANCE(cls):
                    return cls("Emotional disturbance")
                
                @schemas.classproperty
                def HEARING_IMPAIRMENT(cls):
                    return cls("Hearing impairment")
                
                @schemas.classproperty
                def INTELLECTUAL_DISABILITY(cls):
                    return cls("Intellectual Disability")
                
                @schemas.classproperty
                def MULTIPLE_DISABILITIES(cls):
                    return cls("Multiple disabilities")
                
                @schemas.classproperty
                def ORTHOPEDIC_IMPAIRMENT(cls):
                    return cls("Orthopedic impairment")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def OTHER_HEALTH_IMPAIRMENT(cls):
                    return cls("Other health impairment")
                
                @schemas.classproperty
                def SPECIFIC_LEARNING_DISABILITY(cls):
                    return cls("Specific learning disability")
                
                @schemas.classproperty
                def SPEECH_OR_LANGUAGE_IMPAIRMENT(cls):
                    return cls("Speech or language impairment")
                
                @schemas.classproperty
                def TRAUMATIC_BRAIN_INJURY(cls):
                    return cls("Traumatic brain injury")
                
                @schemas.classproperty
                def VISUAL_IMPAIRMENT(cls):
                    return cls("Visual impairment")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'disability_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "disability_code": disability_code,
                "disability_status": disability_status,
                "disability_type": disability_type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disability_code"]) -> MetaOapg.properties.disability_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disability_status"]) -> MetaOapg.properties.disability_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disability_type"]) -> MetaOapg.properties.disability_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["disability_code", "disability_status", "disability_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disability_code"]) -> typing.Union[MetaOapg.properties.disability_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disability_status"]) -> typing.Union[MetaOapg.properties.disability_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disability_type"]) -> typing.Union[MetaOapg.properties.disability_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["disability_code", "disability_status", "disability_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        disability_code: typing.Union[MetaOapg.properties.disability_code, None, str, schemas.Unset] = schemas.unset,
        disability_status: typing.Union[MetaOapg.properties.disability_status, None, str, schemas.Unset] = schemas.unset,
        disability_type: typing.Union[MetaOapg.properties.disability_type, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Disability':
        return super().__new__(
            cls,
            *args,
            disability_code=disability_code,
            disability_status=disability_status,
            disability_type=disability_type,
            _configuration=_configuration,
            **kwargs,
        )
