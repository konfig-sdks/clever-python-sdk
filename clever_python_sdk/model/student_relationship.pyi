# coding: utf-8

"""
    Data API

    Serves the Clever Data API

    The version of the OpenAPI document: 3.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clever_python_sdk import schemas  # noqa: F401


class StudentRelationship(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class relationship(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Parent": "PARENT",
                        "Grandparent": "GRANDPARENT",
                        "Self": "SELF",
                        "Aunt/Uncle": "AUNT_UNCLE",
                        "Sibling": "SIBLING",
                        "Other": "OTHER",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def PARENT(cls):
                    return cls("Parent")
                
                @schemas.classproperty
                def GRANDPARENT(cls):
                    return cls("Grandparent")
                
                @schemas.classproperty
                def SELF(cls):
                    return cls("Self")
                
                @schemas.classproperty
                def AUNT_UNCLE(cls):
                    return cls("Aunt/Uncle")
                
                @schemas.classproperty
                def SIBLING(cls):
                    return cls("Sibling")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relationship':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            student = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Parent/Guardian": "PARENT_GUARDIAN",
                        "Emergency": "EMERGENCY",
                        "Primary": "PRIMARY",
                        "Secondary": "SECONDARY",
                        "Family": "FAMILY",
                        "Other": "OTHER",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def PARENT_GUARDIAN(cls):
                    return cls("Parent/Guardian")
                
                @schemas.classproperty
                def EMERGENCY(cls):
                    return cls("Emergency")
                
                @schemas.classproperty
                def PRIMARY(cls):
                    return cls("Primary")
                
                @schemas.classproperty
                def SECONDARY(cls):
                    return cls("Secondary")
                
                @schemas.classproperty
                def FAMILY(cls):
                    return cls("Family")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "relationship": relationship,
                "student": student,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationship"]) -> MetaOapg.properties.relationship: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["student"]) -> MetaOapg.properties.student: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["relationship", "student", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationship"]) -> typing.Union[MetaOapg.properties.relationship, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["student"]) -> typing.Union[MetaOapg.properties.student, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relationship", "student", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        relationship: typing.Union[MetaOapg.properties.relationship, None, str, schemas.Unset] = schemas.unset,
        student: typing.Union[MetaOapg.properties.student, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StudentRelationship':
        return super().__new__(
            cls,
            *args,
            relationship=relationship,
            student=student,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
