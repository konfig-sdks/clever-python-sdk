# coding: utf-8

"""
    Data API

    Serves the Clever Data API

    The version of the OpenAPI document: 3.1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clever_python_sdk import schemas  # noqa: F401


class District(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def district_contact() -> typing.Type['DistrictContact']:
                return DistrictContact
            error = schemas.StrSchema
            id = schemas.StrSchema
            
            
            class last_sync(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'datetime'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_sync':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            launch_date = schemas.DateSchema
            
            
            class lms_state(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "matching_in_progress": "MATCHING_IN_PROGRESS",
                        "error": "ERROR",
                        "disconnected": "DISCONNECTED",
                        "": "EMPTY",
                        "success": "SUCCESS",
                    }
                
                @schemas.classproperty
                def MATCHING_IN_PROGRESS(cls):
                    return cls("matching_in_progress")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("error")
                
                @schemas.classproperty
                def DISCONNECTED(cls):
                    return cls("disconnected")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("success")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lms_state':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def login_methods() -> typing.Type['DistrictLoginMethods']:
                return DistrictLoginMethods
            
            
            class mdr_number(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mdr_number':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            name = schemas.StrSchema
            
            
            class nces_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nces_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class pause_end(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'datetime'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pause_end':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class pause_start(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'datetime'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pause_start':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            portal_url = schemas.StrSchema
            sis_type = schemas.StrSchema
            
            
            class state(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "running": "RUNNING",
                        "pending": "PENDING",
                        "error": "ERROR",
                        "paused": "PAUSED",
                        "": "EMPTY",
                        "success": "SUCCESS",
                    }
                
                @schemas.classproperty
                def RUNNING(cls):
                    return cls("running")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("error")
                
                @schemas.classproperty
                def PAUSED(cls):
                    return cls("paused")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("success")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "district_contact": district_contact,
                "error": error,
                "id": id,
                "last_sync": last_sync,
                "launch_date": launch_date,
                "lms_state": lms_state,
                "login_methods": login_methods,
                "mdr_number": mdr_number,
                "name": name,
                "nces_id": nces_id,
                "pause_end": pause_end,
                "pause_start": pause_start,
                "portal_url": portal_url,
                "sis_type": sis_type,
                "state": state,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["district_contact"]) -> 'DistrictContact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_sync"]) -> MetaOapg.properties.last_sync: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["launch_date"]) -> MetaOapg.properties.launch_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lms_state"]) -> MetaOapg.properties.lms_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["login_methods"]) -> 'DistrictLoginMethods': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mdr_number"]) -> MetaOapg.properties.mdr_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nces_id"]) -> MetaOapg.properties.nces_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pause_end"]) -> MetaOapg.properties.pause_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pause_start"]) -> MetaOapg.properties.pause_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["portal_url"]) -> MetaOapg.properties.portal_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sis_type"]) -> MetaOapg.properties.sis_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["district_contact", "error", "id", "last_sync", "launch_date", "lms_state", "login_methods", "mdr_number", "name", "nces_id", "pause_end", "pause_start", "portal_url", "sis_type", "state", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["district_contact"]) -> typing.Union['DistrictContact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_sync"]) -> typing.Union[MetaOapg.properties.last_sync, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["launch_date"]) -> typing.Union[MetaOapg.properties.launch_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lms_state"]) -> typing.Union[MetaOapg.properties.lms_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["login_methods"]) -> typing.Union['DistrictLoginMethods', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mdr_number"]) -> typing.Union[MetaOapg.properties.mdr_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nces_id"]) -> typing.Union[MetaOapg.properties.nces_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pause_end"]) -> typing.Union[MetaOapg.properties.pause_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pause_start"]) -> typing.Union[MetaOapg.properties.pause_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["portal_url"]) -> typing.Union[MetaOapg.properties.portal_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sis_type"]) -> typing.Union[MetaOapg.properties.sis_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["district_contact", "error", "id", "last_sync", "launch_date", "lms_state", "login_methods", "mdr_number", "name", "nces_id", "pause_end", "pause_start", "portal_url", "sis_type", "state", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        district_contact: typing.Union['DistrictContact', schemas.Unset] = schemas.unset,
        error: typing.Union[MetaOapg.properties.error, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        last_sync: typing.Union[MetaOapg.properties.last_sync, None, str, schemas.Unset] = schemas.unset,
        launch_date: typing.Union[MetaOapg.properties.launch_date, str, date, schemas.Unset] = schemas.unset,
        lms_state: typing.Union[MetaOapg.properties.lms_state, None, str, schemas.Unset] = schemas.unset,
        login_methods: typing.Union['DistrictLoginMethods', schemas.Unset] = schemas.unset,
        mdr_number: typing.Union[MetaOapg.properties.mdr_number, None, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        nces_id: typing.Union[MetaOapg.properties.nces_id, None, str, schemas.Unset] = schemas.unset,
        pause_end: typing.Union[MetaOapg.properties.pause_end, None, str, schemas.Unset] = schemas.unset,
        pause_start: typing.Union[MetaOapg.properties.pause_start, None, str, schemas.Unset] = schemas.unset,
        portal_url: typing.Union[MetaOapg.properties.portal_url, str, schemas.Unset] = schemas.unset,
        sis_type: typing.Union[MetaOapg.properties.sis_type, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'District':
        return super().__new__(
            cls,
            *args,
            district_contact=district_contact,
            error=error,
            id=id,
            last_sync=last_sync,
            launch_date=launch_date,
            lms_state=lms_state,
            login_methods=login_methods,
            mdr_number=mdr_number,
            name=name,
            nces_id=nces_id,
            pause_end=pause_end,
            pause_start=pause_start,
            portal_url=portal_url,
            sis_type=sis_type,
            state=state,
            _configuration=_configuration,
            **kwargs,
        )

from clever_python_sdk.model.district_contact import DistrictContact
from clever_python_sdk.model.district_login_methods import DistrictLoginMethods
